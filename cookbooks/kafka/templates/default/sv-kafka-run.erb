#!/bin/bash

# This file was generated by Chef for <%= node[:fqdn] %>
# 
# This file is a combination ofkafka-server-start.sh and kafka-run-class.sh to
# prevent forking so runit can manage the service.

base_dir=<%= node[:kafka][:home_dir] %>

for file in $base_dir/project/boot/scala-2.8.0/lib/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/core/target/scala_2.8.0/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/core/lib/*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/perf/target/scala_2.8.0/kafka*.jar;
do
  CLASSPATH=$CLASSPATH:$file
done

for file in $base_dir/core/lib_managed/scala_2.8.0/compile/*.jar;
do
  if [ ${file##*/} != "sbt-launch.jar" ]; then
    CLASSPATH=$CLASSPATH:$file
  fi
done

JMX_PORT=<%= node[:kafka][:jmx_port] %>
KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false "
KAFKA_JMX_OPTS="$KAFKA_JMX_OPTS -Dcom.sun.management.jmxremote.port=$JMX_PORT "

KAFKA_OPTS="-Xmx512M -server  -Dlog4j.configuration=file:$base_dir/config/log4j.properties"

if [ -z $JAVA_HOME ]; then
  JAVA="java"
else
  JAVA="$JAVA_HOME/bin/java"
fi

exec 2>&1 
exec chpst -u <%= @options[:user] %> -L <%= File.join(node[:kafka][:pid_dir], 'kafka.pid') %> $JAVA $KAFKA_OPTS $KAFKA_JMX_OPTS -cp $CLASSPATH kafka.Kafka <%=@options[:install_dir]%>/config/server.properties
