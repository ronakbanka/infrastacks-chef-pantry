# Generated by Chef.
#
# ----------------------------------------------------------------
# Installation specific settings
# ----------------------------------------------------------------

# TODO - DUMP java.home = /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
file.separator = /
rdeck.base = <%= node[:rundeck][:conf_dir] %>
rdeck.home = <%= node[:rundeck][:conf_dir] %>
# TODO - DUMP user.home = /home/rundeck

framework.application.libpath =
framework.application.properties =

#
# Email settings
#
# recipient addresses to send email (comma separated)
framework.email.tolist = <%= node[:rundeck][:email][:to] %>
# email address appearing in message "from" field
framework.email.from = <%= node[:rundeck][:email][:from] %>
# email address replies should go
framework.email.replyto = <%= node[:rundeck][:email][:do_not_reply] %>
# The rdeck email relay host. must be a functioning smtp relay server
framework.email.mailhost = <%= node[:rundeck][:email][:host] %>
framework.email.mailport = <%= node[:rundeck][:email][:port] %>
# User/pass info if the smtp server requires it
framework.email.user = <%= node[:rundeck][:email][:username] %>
framework.email.password = <%= node[:rundeck][:email][:password] %>
framework.email.ssl = <%= node[:rundeck][:email][:ssl] %>
framework.email.failonerror = <%= node[:rundeck][:email][:fail_on_error] %>

# ----------------------------------------------------------------
# Do not make changes below this line 
# ----------------------------------------------------------------


#
# framework.crypto.keystore.filename is the path to the JKS keystore containing a certchain for
# verifying signed jars
# 
framework.crypto.keystore.filename = 

#
# framework.crypto.keystore.password is any password for verifying the keystore integrity
#
framework.crypto.keystore.password = 

#
# framework.crypto.jarSigning.aliasName  is the name of the cert alias to use for verification
#
framework.crypto.jarSigning.aliasName = 



#the hostname of this rdeck node (likely matches hostname)
framework.node.hostname = <%= node[:hostname] %>

#the logical name of this rdeck node (used during Node registration)
framework.node.name = <%= node[:name] %>

# for backwards compatability
framework.node = localhost

# the node type
framework.node.type = @framework.node.type@

# 
#
# Version of this RUNDECK implementation
#
# framework.rdeck.version = 1.1

#
# Root directory of the framework pkg
#
framework.rdeck.dir = ${rdeck.home}

#
# Root directory of the framework instance
#
framework.rdeck.base = <%= node[:rundeck][:conf_dir] %>

#
# Base directory of the installed functional modules
#
# TODO Dump ### framework.modules.dir = /private/tmp/rdl/modules


#
# project spaces containing resources
#
framework.projects.dir= <%= node[:rundeck][:data_dir] %>
framework.depots.dir= <%= node[:rundeck][:data_dir] %>

#
# directory containing instance based property files
#
framework.etc.dir= <%= node[:rundeck][:conf_dir] %>

#
# Base directory where instance of framework var dir is kept
#
framework.var.dir= <%= File.join(node[:rundeck][:home_dir],'var') %>

#
# Framework tmp dir
#
framework.tmp.dir= ${framework.var.dir}/tmp

#
# Base directory where logs are kept
#
framework.logs.dir=${framework.var.dir}/logs

#
# Date/time stamp format used in logs. See java.text.SimpleDateFormat
#
framework.log.format=[yyyy-MM-dd hh:mm:ss-Z]

#
# Directory where plugins are kept. cache will be libext/cache.
#
framework.libext.dir=<%= File.join(node[:rundeck][:home_dir], 'libext') %>

#
# Base directory where module source code is kept
#
# TODO - DUMP framework.src.dir= /private/tmp/rdl/src

#
# Name of nodes metadata file for each project (e.g. nodes.xml/nodes.properties)
#
framework.nodes.file.name= resources.xml

#
# Local Authentication/Authorization Security
#
framework.authorization.class = com.dtolabs.rundeck.core.authorization.NoAuthorization
framework.authentication.class = com.dtolabs.rundeck.core.authentication.NoAuthentication
#
# Remote Client connection authentication
#
framework.nodeauthentication.classname = com.dtolabs.rundeck.core.authentication.DefaultNodeAuthResolutionStrategy

#
# Remote Central Dispatcher service class
#
framework.centraldispatcher.classname = com.dtolabs.client.services.RundeckAPICentralDispatcher

#
#
# rdeck server connection.
#
framework.server.username = <%= node[:rundeck][:server][:username] %>
framework.server.password = <%= node[:rundeck][:server][:password] %>
framework.server.hostname = <%= node[:hostname] %>
framework.server.name = <%= node[:name] %>
framework.server.port = <%= @node[:rundeck][:server][:port] %>
framework.server.url = http://<%= node[:hostname] %>:<%= @node[:rundeck][:server][:port] %>

#
# URL to Rundeck
#
framework.rundeck.url = http://<%= node[:hostname] %>:<%= @node[:rundeck][:server][:port] %>

#
# ssh keypath
#  
framework.ssh.keypath = <%= File.join(node[:rundeck][:home_dir], '.ssh/rundeck.id_rsa') %>

#
# ssh user
#
framework.ssh.user = rundeck


#
# ssh timeout. The connection can be dropped after a specified number of milliseconds.
# A "0" value means wait forever.
#
framework.ssh.timeout = 0

#
# Set the formatting for run-exec console output
#
# Examples:
# 1) Format specification to work with Rundeck. %command will be "run-exec"
#
# framework.log.run-exec.console.format =[%user@%node %command][%level] %message
#
framework.log.run-exec.console.format =[%user@%node %command][%level] %message
