export ES_CONF_DIR=${ES_CONF_DIR-<%= @elasticsearch[:conf_dir] %>}
export ES_DATA_DIR=${ES_DATA_DIR-<%= @elasticsearch[:data_dir] %>}
export ES_WORK_DIR=${ES_WORK_DIR-<%= @elasticsearch[:scratch_dir] %>}

export CLASSPATH=$ES_HOME/plugins/cloud-aws.zip
CLASSPATH=$CLASSPATH:$ES_HOME/lib/elasticsearch-*.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*
# CLASSPATH=$CLASSPATH:$ES_HOME/lib/${project.build.finalName}.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*
export ES_CLASSPATH=$CLASSPATH

ES_JAVA_OPTS="$ES_JAVA_OPTS -Des.path.data=$ES_DATA_DIR -Des.path.work=$ES_WORK_DIR -Des.path.conf=$ES_CONF_DIR"
# # Tie data nodes to a specific name (while still letting clients set their own)
# ES_JAVA_OPTS="-Des.node.name=<%= node.name %> $ES_JAVA_OPTS"

# Arguments to pass to the JVM. These come through from the /etc/sv/elasticsearch/run file
if [ "x$ES_MIN_MEM" = "x" ]; then ES_MIN_MEM=1500m ; fi
if [ "x$ES_MAX_MEM" = "x" ]; then ES_MAX_MEM=1500m ; fi

# Min and max heap should be the same (roughly 75% of total heap, actual mileage may vary)
JAVA_OPTS="$JAVA_OPTS -Xms${ES_MIN_MEM}"
JAVA_OPTS="$JAVA_OPTS -Xmx${ES_MAX_MEM}"

# Jvm stack size (per thread)
JAVA_OPTS="$JAVA_OPTS -Xss256k" 

# 
JAVA_OPTS="$JAVA_OPTS -Djava.awt.headless=true"
JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true"
JAVA_OPTS="$JAVA_OPTS -Djline.enabled=true"

# Dump heap on OOM
JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError"
JAVA_OPTS="$JAVA_OPTS -XX:HeapDumpPath=<%= @elasticsearch[:log_dir] %>/heap"

# GC strategy
JAVA_OPTS="$JAVA_OPTS -XX:+UseParNewGC"
JAVA_OPTS="$JAVA_OPTS -XX:+UseConcMarkSweepGC"
JAVA_OPTS="$JAVA_OPTS -XX:+CMSParallelRemarkEnabled"
JAVA_OPTS="$JAVA_OPTS -XX:CMSInitiatingOccupancyFraction=75"
JAVA_OPTS="$JAVA_OPTS -XX:+UseCMSInitiatingOccupancyOnly"

# New-Gen heap options
if [ "x$ES_HEAP_NEWSIZE" != "x" ]; then
  JAVA_OPTS="$JAVA_OPTS -XX:NewSize=$ES_HEAP_NEWSIZE"
  JAVA_OPTS="$JAVA_OPTS -XX:MaxNewSize=$ES_HEAP_NEWSIZE"
  JAVA_OPTS="$JAVA_OPTS -XX:SurvivorRatio=5"
  JAVA_OPTS="$JAVA_OPTS -XX:MaxTenuringThreshold=2"
fi

# JMX options
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=9400"
JAVA_OPTS="$JAVA_OPTS -Djava.rmi.server.hostname=<%= @elasticsearch[:jmx_dash_addr] %>"

<%- if @elasticsearch[:gc_logging] %>
# Verbose GC 
JAVA_OPTS="$JAVA_OPTS -verbose:gc"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCDetails"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintHeapAtGC"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCTimeStamps"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintClassHistogram"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintTenuringDistribution"
JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCApplicationStoppedTime"
JAVA_OPTS="$JAVA_OPTS -Xloggc:<%= @elasticsearch[:log_dir] %>/gc.log"

<%- end %>
# Aggressive JVM setttings
JAVA_OPTS="$JAVA_OPTS -XX:+AggressiveOpts"

<% if node[:kernel][:machine] == 'x86_64' -%>
# Run compressed pointers to save on heap
JAVA_OPTS="$JAVA_OPTS -XX:+UseCompressedOops"

<% end -%>
# Always run in server mode (usually the default anyway)
JAVA_OPTS="-server $JAVA_OPTS"

<%= @elasticsearch[:added_config]['elasticsearch.in.sh'] %>

export JAVA_OPTS ES_JAVA_OPTS ES_MAX_MEM ES_MIN_MEM