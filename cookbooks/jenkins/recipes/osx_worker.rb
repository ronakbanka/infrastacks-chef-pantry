WORKER_HOME    = node[:jenkins][:worker][:home_dir]
WORKER_USER = node[:jenkins][:worker][:user]
bashlet_dir = File.expand_path("#{WORKER_HOME}/.bash")

package "rbenv"
package "ruby-build"

::RBENV_HOME = "#{WORKER_HOME}/.rbenv"
::RBENV_COMMAND = "/usr/local/bin/rbenv"

directory bashlet_dir do
  owner         WORKER_USER
end

file "#{WORKER_HOME}/.bash_profile" do
  owner         WORKER_USER
  content <<-EOF
PATH=/usr/local/bin:$PATH
# Generated by chef -- put stuff in #{bashlet_dir} with a .sh extension
for file in #{bashlet_dir}/*.sh; do
  [[ -r $file ]] && source $file;
done
EOF
end

file "#{bashlet_dir}/rbenv.sh" do
  owner         WORKER_USER
  content %Q{eval "$(rbenv init -)"\nexport PATH=~/.rbenv/shims:$PATH}
end

file "#{WORKER_HOME}/.bashrc" do
  owner         WORKER_USER
  content %Q{eval "$(rbenv init -)"\nexport PATH=~/.rbenv/shims:$PATH}
end

def rbenv_ruby_install(ruby_version, env_override)
  unless File.exists?("#{::RBENV_HOME}/#{ruby_version}/bin/ruby")
    install_cmd = "#{env_override} #{RBENV_COMMAND} install #{ruby_version}"

    execute "installing #{ruby_version} with RBENV: #{install_cmd}" do
      command   install_cmd
      user      WORKER_USER
      returns   [0,1]
      environment 'HOME' => WORKER_HOME, 'USER' => WORKER_USER
      not_if{   File.exists?("#{WORKER_HOME}/.rbenv/versions/#{ruby_version}/bin/ruby") }
    end
    execute "check #{ruby_version}" do
      command   "#{RBENV_COMMAND} versions | grep -q #{ruby_version}"
      user      WORKER_USER
      environment 'HOME' => WORKER_HOME, 'USER' => WORKER_USER
    end
    execute "rbenv gem install bundler" do
      command   "rbenv exec gem list | grep -q bundler || rbenv exec gem install bundler"
      user      WORKER_USER
      environment 'HOME' => WORKER_HOME, 'USER' => WORKER_USER
    end
  end
end

node["rbenv"]["rubies"].each do |ruby_version_string, env_override|
  rbenv_ruby_install(ruby_version_string, env_override)
end

if node["rbenv"]["default_ruby"]
  execute "making #{node["rbenv"]["default_ruby"]} with rbenv the default" do
    command     "rbenv global #{node["rbenv"]["default_ruby"]}"
    user        WORKER_USER
    environment 'HOME' => WORKER_HOME, 'USER' => WORKER_USER
  end
end
